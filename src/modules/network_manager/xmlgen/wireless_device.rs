/// # D-Bus interface proxy for: `org.freedesktop.NetworkManager.Device.Wireless`
///
/// This code was generated by `zbus-xmlgen` `4.1.0` from D-Bus introspection data.
/// Source: `Interface '/org/freedesktop/NetworkManager/Devices/3' from service 'org.freedesktop.NetworkManager' on system bus`.
///
/// You may prefer to adapt it, instead of using it verbatim.
///
/// More information can be found in the [Writing a client proxy] section of the zbus
/// documentation.
///
/// This type implements the [D-Bus standard interfaces], (`org.freedesktop.DBus.*`) for which the
/// following zbus API can be used:
///
/// * [`zbus::fdo::PropertiesProxy`]
/// * [`zbus::fdo::IntrospectableProxy`]
/// * [`zbus::fdo::PeerProxy`]
///
/// Consequently `zbus-xmlgen` did not generate code for the above interfaces.
///
/// [Writing a client proxy]: https://dbus2.github.io/zbus/client.html
/// [D-Bus standard interfaces]: https://dbus.freedesktop.org/doc/dbus-specification.html#standard-interfaces,
use zbus::proxy;

use super::NM80211Mode;
#[proxy(
    interface = "org.freedesktop.NetworkManager.Device.Wireless",
    default_service = "org.freedesktop.NetworkManager",
    gen_blocking = false
)]
trait Wireless {
    /// DEPRECATED. Get the list of access points visible to this device.
    /// Note that this list does not include access points which hide their SSID.
    /// To retrieve a list of all access points (including hidden ones) use the GetAllAccessPoints() method.
    #[deprecated]
    fn get_access_points(&self) -> zbus::Result<Vec<zbus::zvariant::OwnedObjectPath>>;

    /// Get the list of all access points visible to this device, including hidden ones for which the SSID is not yet known.
    ///
    /// OUT ao access_points: List of access point object paths.
    fn get_all_access_points(&self) -> zbus::Result<Vec<zbus::zvariant::OwnedObjectPath>>;

    /// Request the device to scan. To know when the scan is finished, use the "PropertiesChanged"
    /// signal from "org.freedesktop.DBus.Properties" to listen to changes to the "LastScan" property.
    fn request_scan(
        &self,
        options: std::collections::HashMap<&str, &zbus::zvariant::Value<'_>>,
    ) -> zbus::Result<()>;

    /// Emitted when a new access point is found by the device.
    ///
    /// o access_point: The object path of the newly found access point.
    #[zbus(signal)]
    fn access_point_added(&self, access_point: zbus::zvariant::ObjectPath<'_>) -> zbus::Result<()>;

    /// Emitted when an access point disappears from view of the device.
    #[zbus(signal)]
    fn access_point_removed(
        &self,
        access_point: zbus::zvariant::ObjectPath<'_>,
    ) -> zbus::Result<()>;

    /// List of object paths of access point visible to this wireless device.
    #[zbus(property)]
    fn access_points(&self) -> zbus::Result<Vec<zbus::zvariant::OwnedObjectPath>>;

    /// ActiveAccessPoint property
    #[zbus(property)]
    fn active_access_point(&self) -> zbus::Result<zbus::zvariant::OwnedObjectPath>;

    /// The bit rate currently used by the wireless device, in kilobits/second (Kb/s).
    #[zbus(property)]
    fn bitrate(&self) -> zbus::Result<u32>;

    /// HwAddress property
    #[deprecated]
    #[zbus(property)]
    fn hw_address(&self) -> zbus::Result<String>;

    /// LastScan property
    #[zbus(property)]
    fn last_scan(&self) -> zbus::Result<i64>;

    /// Mode property
    #[zbus(property)]
    fn mode(&self) -> zbus::Result<NM80211Mode>;

    /// PermHwAddress property
    #[zbus(property)]
    fn perm_hw_address(&self) -> zbus::Result<String>;

    /// WirelessCapabilities property
    #[zbus(property)]
    fn wireless_capabilities(&self) -> zbus::Result<u32>;
}
